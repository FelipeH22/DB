package gui;

import java.sql.SQLException;
import db.*;
import datos.*;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author felipe
 */
public class vista extends javax.swing.JFrame {
    int fila,seleccion;
    int operacionCliente, operacionCuenta, operacionEvento;
    String transaccion;
    daoCuentaAhorro dbc2 = new daoCuentaAhorro();
    cuentaAhorro[] cuentas;
    daoCliente dbc = new daoCliente();
    cliente[] clientes;
    daoMovimientoCuenta dbc3 = new daoMovimientoCuenta();
    movimientoCuenta[] movimientos;
    daoEventoCuenta dbc4 = new daoEventoCuenta();
    eventoCuenta[] eventos;
    Object[][] dataCliente;
    Object[][] dataCuenta;
    Object[][] dataMovimiento;
    Object[][] dataEvento;
    /**
     * Creates new form ventana
     * @throws java.sql.SQLException
     */
    public vista() throws SQLException {
        initComponents();
        this.campoCuentaOrigen.setEnabled(true);
        this.setLocationRelativeTo(null);
        this.setTitle("Mini Banco");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() throws SQLException{

        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelClientes = new javax.swing.JPanel();
        campoFechaNacimiento = new javax.swing.JTextField();
        labelOcupacion = new javax.swing.JLabel();
        labelCorreoElectronico = new javax.swing.JLabel();
        campoOcupacion = new javax.swing.JTextField();
        campoCorreoElectronico = new javax.swing.JTextField();
        labelFechaNacimiento = new javax.swing.JLabel();
        labelSexo = new javax.swing.JLabel();
        campoSexo = new javax.swing.JTextField();
        labelDNI = new javax.swing.JLabel();
        campoDNI = new javax.swing.JTextField();
        labelTipoID = new javax.swing.JLabel();
        campoTipoID = new javax.swing.JTextField();
        labelNombre = new javax.swing.JLabel();
        campoNombre = new javax.swing.JTextField();
        labelApellido = new javax.swing.JLabel();
        campoApellido = new javax.swing.JTextField();
        labelDireccion = new javax.swing.JLabel();
        campoDireccion = new javax.swing.JTextField();
        labelTelefono = new javax.swing.JLabel();
        campoTelefono = new javax.swing.JTextField();
        botonConsultarCliente = new javax.swing.JButton();
        botonInsertarCliente = new javax.swing.JButton();
        botonEliminarCliente = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaCliente = new javax.swing.JTable();
        labelIngresoMensual = new javax.swing.JLabel();
        campoIngresoMensual = new javax.swing.JTextField();
        botonActualizarCliente = new javax.swing.JButton();
        botonConfirmar = new javax.swing.JButton();
        panelCuenta = new javax.swing.JPanel();
        labelNumCuenta = new javax.swing.JLabel();
        campoNumCuenta = new javax.swing.JTextField();
        labelEstado = new javax.swing.JLabel();
        campoEstado = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaCuenta = new javax.swing.JTable();
        botonConfirmarCuenta = new javax.swing.JButton();
        botonConsultarCuenta = new javax.swing.JButton();
        labelSaldo = new javax.swing.JLabel();
        campoSaldo = new javax.swing.JTextField();
        labelFecha = new javax.swing.JLabel();
        campoFecha = new javax.swing.JTextField();
        botonInsertarCuenta = new javax.swing.JButton();
        labelIdenCliente = new javax.swing.JLabel();
        campoIdenCliente = new javax.swing.JTextField();
        panelTransacciones = new javax.swing.JPanel();
        labelCuentaOrigen = new javax.swing.JLabel();
        campoCantidad = new javax.swing.JTextField();
        labelCuentaDestino = new javax.swing.JLabel();
        campoCuentaDestino = new javax.swing.JTextField();
        labelCantidad = new javax.swing.JLabel();
        campoCuentaOrigen = new javax.swing.JTextField();
        botonFinalizarTransaccion = new javax.swing.JButton();
        botonConsultarMovimientos = new javax.swing.JButton();
        elegirTransaccion = new javax.swing.JComboBox<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaMovimientos = new javax.swing.JTable();
        botonConsultarTodosMovimientos = new javax.swing.JButton();
        panelEventos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaEventos = new javax.swing.JTable();
        labelNumCuentaEvento = new javax.swing.JLabel();
        campoNumCuentaEvento = new javax.swing.JTextField();
        botonConsultarEvento = new javax.swing.JButton();
        botonActivarCuenta = new javax.swing.JButton();
        labelCodigoEvento = new javax.swing.JLabel();
        campoCodigoEvento = new javax.swing.JTextField();
        labelTipoEvento = new javax.swing.JLabel();
        campoTipoEvento = new javax.swing.JTextField();
        labelFechaEvento = new javax.swing.JLabel();
        campoFechaEvento = new javax.swing.JTextField();
        labelDescripcionEvento = new javax.swing.JLabel();
        campoDescripcionEvento = new javax.swing.JTextField();
        botonDesactivarCuenta = new javax.swing.JButton();
        botonBloquearCuenta = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelClientes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        campoFechaNacimiento.setEnabled(false);
        campoFechaNacimiento.addActionListener(this::campoFechaNacimientoActionPerformed);
        panelClientes.add(campoFechaNacimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 330, 140, 30));

        labelOcupacion.setText("Ocupación");
        panelClientes.add(labelOcupacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, 30, -1));

        labelCorreoElectronico.setText("Correo electrónico");
        panelClientes.add(labelCorreoElectronico, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 400, 60, -1));

        campoOcupacion.setEnabled(false);
        campoOcupacion.addActionListener(this::campoOcupacionActionPerformed);
        panelClientes.add(campoOcupacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, 140, 30));

        campoCorreoElectronico.setEnabled(false);
        campoCorreoElectronico.addActionListener(this::campoCorreoElectronicoActionPerformed);
        panelClientes.add(campoCorreoElectronico, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 390, 140, 30));

        labelFechaNacimiento.setText("Fecha nacimiento");
        panelClientes.add(labelFechaNacimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 340, 60, -1));

        labelSexo.setText("Sexo");
        panelClientes.add(labelSexo, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 340, -1, -1));

        campoSexo.setEnabled(false);
        campoSexo.addActionListener(this::campoSexoActionPerformed);
        panelClientes.add(campoSexo, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 330, 140, 30));

        labelDNI.setText("DNI");
        panelClientes.add(labelDNI, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, -1, -1));

        campoDNI.setEnabled(false);
        campoDNI.addActionListener(this::campoDNIActionPerformed);
        panelClientes.add(campoDNI, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 270, 140, 30));

        labelTipoID.setText("Tipo ID");
        panelClientes.add(labelTipoID, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 280, -1, -1));

        campoTipoID.setEnabled(false);
        campoTipoID.addActionListener(this::campoTipoIDActionPerformed);
        panelClientes.add(campoTipoID, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 270, 140, 30));

        labelNombre.setText("Nombre");
        panelClientes.add(labelNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 280, -1, -1));

        campoNombre.setEnabled(false);
        campoNombre.addActionListener(this::campoNombreActionPerformed);
        panelClientes.add(campoNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 270, 140, 30));

        labelApellido.setText("Apellido");
        panelClientes.add(labelApellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 280, -1, -1));

        campoApellido.setEnabled(false);
        campoApellido.addActionListener(this::campoApellidoActionPerformed);
        panelClientes.add(campoApellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 270, 140, 30));

        labelDireccion.setText("Dirección");
        panelClientes.add(labelDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 30, -1));

        campoDireccion.setEnabled(false);
        campoDireccion.addActionListener(this::campoDireccionActionPerformed);
        panelClientes.add(campoDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 330, 140, 30));

        labelTelefono.setText("Teléfono");
        panelClientes.add(labelTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 340, -1, -1));

        campoTelefono.setEnabled(false);
        campoTelefono.addActionListener(this::campoTelefonoActionPerformed);
        panelClientes.add(campoTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 330, 140, 30));

        botonConsultarCliente.setText("Consultar ");
        botonConsultarCliente.addActionListener(this::botonConsultarClienteActionPerformed);
        panelClientes.add(botonConsultarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 390, -1, -1));

        botonInsertarCliente.setText("Insertar");
        botonInsertarCliente.addActionListener(this::botonInsertarClienteActionPerformed);
        panelClientes.add(botonInsertarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 390, -1, -1));

        botonEliminarCliente.setText("Eliminar");
        botonEliminarCliente.addActionListener(this::botonEliminarClienteActionPerformed);
        panelClientes.add(botonEliminarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 390, -1, -1));

        this.llenaClientes();
        tablaCliente.setModel(new javax.swing.table.DefaultTableModel(
            dataCliente,
            new String [] {
                "DNI", "Tipo de indentificación", "Nombre", "Apellido", "Dirección", "Teléfono", "Sexo", "Fecha nacimiento", "Ocupación", "Correo electrónico", "Ingresos mensuales"
            }
        ));
        tablaCliente.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tablaCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaClienteMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablaCliente);

        panelClientes.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 870, 260));

        labelIngresoMensual.setText("Ingreso mensual");
        panelClientes.add(labelIngresoMensual, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 400, 60, -1));

        campoIngresoMensual.setEnabled(false);
        campoIngresoMensual.addActionListener(this::campoIngresoMensualActionPerformed);
        panelClientes.add(campoIngresoMensual, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 390, 120, 30));

        botonActualizarCliente.setText("Modificar");
        botonActualizarCliente.addActionListener(this::botonActualizarClienteActionPerformed);
        panelClientes.add(botonActualizarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 420, 90, -1));

        botonConfirmar.setText("Confirmar");
        botonConfirmar.setEnabled(false);
        botonConfirmar.addActionListener((java.awt.event.ActionEvent evt) -> {
            try {
                botonConfirmarActionPerformed(evt);
            } catch (SQLException ex) {
                Logger.getLogger(vista.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        panelClientes.add(botonConfirmar, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 420, 140, -1));

        jTabbedPane1.addTab("Clientes", panelClientes);

        panelCuenta.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelNumCuenta.setText("Número de cuenta");
        panelCuenta.add(labelNumCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, -1, -1));

        campoNumCuenta.setEnabled(false);
        campoNumCuenta.addActionListener(this::campoNumCuentaActionPerformed);
        panelCuenta.add(campoNumCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 270, 140, 30));

        labelEstado.setText("Estado");
        panelCuenta.add(labelEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 280, -1, -1));

        campoEstado.setEnabled(false);
        campoEstado.addActionListener(this::campoEstadoActionPerformed);
        panelCuenta.add(campoEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 270, 140, 30));
        
        botonConfirmarCuenta.setText("Confirmar");
        botonConfirmarCuenta.setEnabled(false);
        botonConfirmarCuenta.addActionListener((java.awt.event.ActionEvent evt) -> {
            try {
                botonConfirmarCuenta(evt);
            } catch (SQLException ex) {
                Logger.getLogger(vista.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        panelCuenta.add(botonConfirmarCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 410, -1, -1));

        this.llenaCuentas();
        tablaCuenta.setModel(new javax.swing.table.DefaultTableModel(
            dataCuenta,
            new String [] {
                "Número de cuenta", "Estado", "Saldo", "Fecha apertura", "Documento asociado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Object.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tablaCuenta.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCuentaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaCuenta);

        panelCuenta.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 870, 230));

        botonConsultarCuenta.setText("Consultar");
        botonConsultarCuenta.addActionListener(this::botonConsultarCuentaListener);
        panelCuenta.add(botonConsultarCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, -1, -1));

        labelSaldo.setText("Saldo");
        panelCuenta.add(labelSaldo, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 280, -1, -1));

        campoSaldo.setEnabled(false);
        panelCuenta.add(campoSaldo, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 270, 130, 30));

        labelFecha.setText("Fecha apertura");
        panelCuenta.add(labelFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 280, -1, -1));

        campoFecha.setEnabled(false);
        panelCuenta.add(campoFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 270, 90, 30));

        botonInsertarCuenta.setText("Insertar");
        botonInsertarCuenta.addActionListener(this::botonInsertarCuentaListener);
        panelCuenta.add(botonInsertarCuenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 410, -1, -1));

        labelIdenCliente.setText("Documento asociado");
        panelCuenta.add(labelIdenCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, -1, -1));

        campoIdenCliente.setEnabled(false);
        panelCuenta.add(campoIdenCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 330, 130, 30));

        jTabbedPane1.addTab("Cuenta", panelCuenta);

        labelCuentaOrigen.setText("Cuenta Origen");

        campoCantidad.setEnabled(false);

        labelCuentaDestino.setText("Cuenta Destino");

        campoCuentaDestino.setEnabled(false);

        labelCantidad.setText("Cantidad ");

        campoCuentaOrigen.setEnabled(false);

        botonFinalizarTransaccion.setText("Finalizar transacción");
        botonFinalizarTransaccion.addActionListener((java.awt.event.ActionEvent evt) -> {
            try {
                botonFinalizarTransaccionActionPerformed(evt);
            } catch (SQLException ex) {
                Logger.getLogger(vista.class.getName()).log(Level.SEVERE, null, ex);
            }
        });

        botonConsultarMovimientos.setText("Consultar movimientos de la cuenta");
        botonConsultarMovimientos.addActionListener(this::botonConsultarMovimientosActionPerformed);

        elegirTransaccion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar tipo movimiento", "Retirar", "Transferencia","Consignar"}));
        elegirTransaccion.addItemListener(this::elegirTransaccionItemStateChanged);
        elegirTransaccion.addActionListener(this::elegirTransaccionActionPerformed);
        tablaMovimientos.setVisible(false);
        this.llenaMovimientos();
        tablaMovimientos.setModel(new javax.swing.table.DefaultTableModel(
            dataMovimiento,
            new String [] {
                "Código movimiento", "Valor movimiento", "Tipo movimiento", "Fecha movimiento", "Número de cuenta"
            }
        ));
        jScrollPane4.setViewportView(tablaMovimientos);

        botonConsultarTodosMovimientos.setText("Consultar todos los movimientos");
        botonConsultarTodosMovimientos.addActionListener(this::botonConsultarTodosMovimientosActionPerformed);

        javax.swing.GroupLayout panelTransaccionesLayout = new javax.swing.GroupLayout(panelTransacciones);
        panelTransacciones.setLayout(panelTransaccionesLayout);
        panelTransaccionesLayout.setHorizontalGroup(
            panelTransaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTransaccionesLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(panelTransaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTransaccionesLayout.createSequentialGroup()
                        .addGroup(panelTransaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelTransaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelTransaccionesLayout.createSequentialGroup()
                                    .addComponent(labelCantidad)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(campoCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelTransaccionesLayout.createSequentialGroup()
                                    .addComponent(labelCuentaDestino)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(campoCuentaDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(elegirTransaccion, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelTransaccionesLayout.createSequentialGroup()
                                .addComponent(labelCuentaOrigen)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(campoCuentaOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelTransaccionesLayout.createSequentialGroup()
                        .addGroup(panelTransaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(botonConsultarTodosMovimientos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonFinalizarTransaccion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonConsultarMovimientos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(100, 100, 100)))
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelTransaccionesLayout.setVerticalGroup(
            panelTransaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTransaccionesLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(panelTransaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTransaccionesLayout.createSequentialGroup()
                        .addComponent(elegirTransaccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addGroup(panelTransaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelCuentaOrigen)
                            .addComponent(campoCuentaOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelTransaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelCuentaDestino)
                            .addComponent(campoCuentaDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(panelTransaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelCantidad)
                            .addComponent(campoCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonFinalizarTransaccion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE))
                    .addGroup(panelTransaccionesLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)))
                .addComponent(botonConsultarMovimientos)
                .addGap(18, 18, 18)
                .addComponent(botonConsultarTodosMovimientos)
                .addContainerGap(103, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Transacciones", panelTransacciones);

        this.llenaEventos();
        tablaEventos.setModel(new javax.swing.table.DefaultTableModel(
            dataEvento,
            new String [] {
                "Código Evento", "Tipo evento", "Fecha evento", "Descripción evento", "Número cuenta asociada"
            }
        ));
        tablaEventos.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaEventosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaEventos);

        labelNumCuentaEvento.setText("Número de cuenta");

        campoNumCuentaEvento.setEnabled(false);
        campoNumCuentaEvento.addActionListener(this::campoNumCuentaEventoActionPerformed);

        botonConsultarEvento.setText("Consultar");
        botonConsultarEvento.addActionListener(this::botonConsultarEventoActionPerformed);

        botonActivarCuenta.setText("Activar cuenta");
        botonActivarCuenta.addActionListener(this::botonActivarCuentaActionPerformed);

        labelCodigoEvento.setText("Código evento");

        campoCodigoEvento.setEnabled(false);

        labelTipoEvento.setText("Tipo Evento");

        campoTipoEvento.setEnabled(false);

        labelFechaEvento.setText("Fecha evento");

        campoFechaEvento.setEnabled(false);
        campoFechaEvento.addActionListener(this::campoFechaEventoActionPerformed);

        labelDescripcionEvento.setText("Descripción evento");

        campoDescripcionEvento.setEnabled(false);

        botonDesactivarCuenta.setText("Desactivar cuenta");
        botonDesactivarCuenta.addActionListener(this::botonDesactivarCuentaActionPerformed);

        botonBloquearCuenta.setText("Bloquear cuenta");
        botonBloquearCuenta.addActionListener(this::botonBloquearCuentaActionPerformed);

        javax.swing.GroupLayout panelEventosLayout = new javax.swing.GroupLayout(panelEventos);
        panelEventos.setLayout(panelEventosLayout);
        panelEventosLayout.setHorizontalGroup(
            panelEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 870, Short.MAX_VALUE)
            .addGroup(panelEventosLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(panelEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEventosLayout.createSequentialGroup()
                        .addComponent(labelCodigoEvento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoCodigoEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(labelTipoEvento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoTipoEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelFechaEvento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoFechaEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelDescripcionEvento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoDescripcionEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelEventosLayout.createSequentialGroup()
                        .addComponent(botonActivarCuenta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonDesactivarCuenta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonBloquearCuenta))
                    .addGroup(panelEventosLayout.createSequentialGroup()
                        .addComponent(labelNumCuentaEvento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoNumCuentaEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botonConsultarEvento)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelEventosLayout.setVerticalGroup(
            panelEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEventosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(panelEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCodigoEvento)
                    .addComponent(campoCodigoEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTipoEvento)
                    .addComponent(campoTipoEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFechaEvento)
                    .addComponent(campoFechaEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDescripcionEvento)
                    .addComponent(campoDescripcionEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(panelEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNumCuentaEvento)
                    .addComponent(campoNumCuentaEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonConsultarEvento))
                .addGap(27, 27, 27)
                .addGroup(panelEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonActivarCuenta)
                    .addComponent(botonDesactivarCuenta)
                    .addComponent(botonBloquearCuenta))
                .addGap(31, 31, 31))
        );

        jTabbedPane1.addTab("Eventos", panelEventos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>                        

                                         

    private void campoEstadoActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void campoNumCuentaActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void campoIngresoMensualActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
    }                                                   

    private void campoTelefonoActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void campoDireccionActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void campoApellidoActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void campoNombreActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void campoTipoIDActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void campoDNIActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void campoSexoActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void campoCorreoElectronicoActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        // TODO add your handling code here:
    }                                                      

    private void campoOcupacionActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void campoFechaNacimientoActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        // TODO add your handling code here:
    }                                                    

    private void botonConsultarEventoActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        this.campoNumCuentaEvento.setEnabled(true);
    }                                                    

    private void campoNumCuentaEventoActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        // TODO add your handling code here:
    }                                                    

    private void botonActivarCuentaActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
    }                                                  

    private void campoFechaEventoActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
    }                                                

    private void botonDesactivarCuentaActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        // TODO add your handling code here:
    }                                                     

    private void botonBloquearCuentaActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
    }                                                   

    private void elegirTransaccionActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
    }                                            
    
    ////////////////////////////////////////////////////
    //                                                // 
    //                                                //  
    //         Listener Botones movmimientos          //
    //                                                //
    //                                                //
    ////////////////////////////////////////////////////
    
    private void elegirTransaccionItemStateChanged(java.awt.event.ItemEvent evt) {                                                   
        switch (this.elegirTransaccion.getSelectedItem().toString()) {
            case "Retirar":
                this.transaccion = "RETIRO";
                this.campoCuentaDestino.setEnabled(false);
                this.campoCuentaOrigen.setEnabled(true);
                this.campoCantidad.setEnabled(true);
                break;
            case "Transferencia":
                this.transaccion = "TRANSFERENCIA";
                this.campoCuentaOrigen.setEnabled(true);
                this.campoCuentaDestino.setEnabled(true);
                this.campoCantidad.setEnabled(true);
                DefaultTableModel dm = (DefaultTableModel) tablaMovimientos.getModel();
                TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(dm);
                tablaMovimientos.setRowSorter(tr);
                tr.setRowFilter(RowFilter.regexFilter(""));
                break;
            case "Consignar":
                this.transaccion = "CONSIGNACION";
                this.campoCuentaOrigen.setEnabled(false);
                this.campoCuentaDestino.setEnabled(true);
                this.campoCantidad.setEnabled(true);
                break;
            case "Seleccionar tipo movimiento":
                this.campoCuentaOrigen.setEnabled(true);
                this.campoCuentaDestino.setEnabled(false);
                this.campoCantidad.setEnabled(false);
                break;
            default:
                break;
        }
    }
    
    private void botonConsultarMovimientosActionPerformed(java.awt.event.ActionEvent evt) {   
        DefaultTableModel dm = (DefaultTableModel) tablaMovimientos.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(dm);
        tablaMovimientos.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(this.campoCuentaOrigen.getText()));
        tablaMovimientos.getRowSorter().toggleSortOrder(3);
        tablaMovimientos.getRowSorter().toggleSortOrder(3);
        this.tablaMovimientos.setVisible(true);

    }                                                         

    private void botonConsultarTodosMovimientosActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultTableModel dm = (DefaultTableModel) tablaMovimientos.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(dm);
        tablaMovimientos.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(""));
        tablaMovimientos.getRowSorter().toggleSortOrder(3);
        tablaMovimientos.getRowSorter().toggleSortOrder(3);
        this.tablaMovimientos.setVisible(true);
    } 
    
    private void botonFinalizarTransaccionActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {    
        Date myDate = new Date();
        this.campoCuentaOrigen.setEnabled(false);
        this.campoCuentaDestino.setEnabled(false);
        this.campoCantidad.setEnabled(false);
        movimientoCuenta co = new movimientoCuenta();
        movimientoCuenta cd = new movimientoCuenta();
        co.setF_MOVIMIENTO(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.ms").format(new Timestamp(myDate.getTime())));
        co.setI_TIPO(this.transaccion);       
        cd.setF_MOVIMIENTO(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.ms").format(new Timestamp(myDate.getTime())));
        cd.setI_TIPO(this.transaccion);
        switch (this.transaccion) {
            case "TRANSFERENCIA":
                co.setK_NUM_CUENTA(Long.valueOf(this.campoCuentaOrigen.getText()));
                co.setV_MOVIMIENTO(Float.valueOf(this.campoCantidad.getText())*(-1));
                cd.setK_NUM_CUENTA(Long.valueOf(this.campoCuentaDestino.getText()));
                cd.setV_MOVIMIENTO(Float.valueOf(this.campoCantidad.getText()));
                TableModel modelo = tablaMovimientos.getModel();
                co.setK_MOVIMIENTO(modelo.getRowCount()+1);
                cd.setK_MOVIMIENTO(modelo.getRowCount()+2);
                DefaultTableModel model = (DefaultTableModel) tablaMovimientos.getModel();
                dbc3.insertar(co);
                dbc3.insertar(cd);
                Object[] newRow1={co.getK_MOVIMIENTO(),co.getV_MOVIMIENTO(),co.getI_TIPO(),co.getF_MOVIMIENTO(),co.getK_NUM_CUENTA()};
                model.addRow(newRow1);
                JOptionPane.showMessageDialog(null, "Movimiento Realizado correctamente");
                Object[] newRow2={cd.getK_MOVIMIENTO(),cd.getV_MOVIMIENTO(),cd.getI_TIPO(),cd.getF_MOVIMIENTO(),cd.getK_NUM_CUENTA()};
                model.addRow(newRow2);  
                tablaMovimientos.getRowSorter().toggleSortOrder(3);
                tablaMovimientos.getRowSorter().toggleSortOrder(3);
                
                //Descuento en las cuentas
                int filaEncontrada1 = 0;
                int filaEncontrada2 = 0;
                DefaultTableModel modeloCuenta = (DefaultTableModel) tablaCuenta.getModel();
                for (int i = 0; i < tablaCuenta.getRowCount(); i++) {
                    if(Long.valueOf(tablaCuenta.getValueAt(i, 0).toString())==(co.getK_NUM_CUENTA())){
                        filaEncontrada1 = i;
                         modeloCuenta.setValueAt(Float.valueOf(modeloCuenta.getValueAt(filaEncontrada1, 2).toString())+co.getV_MOVIMIENTO(), filaEncontrada1, 2);
                         System.out.println("Saldo Cambiado");
                        break;
                    }else{
                        filaEncontrada1 = -1;
                    }
                }
                
                for (int j = 0; j < tablaCuenta.getRowCount(); j++) {
                    if(Long.valueOf(tablaCuenta.getValueAt(j, 0).toString())==(cd.getK_NUM_CUENTA())){
                        filaEncontrada2 = j;
                        modeloCuenta.setValueAt(Float.valueOf(modeloCuenta.getValueAt(filaEncontrada2, 2).toString())+cd.getV_MOVIMIENTO(), filaEncontrada2, 2);
                        System.out.println("Saldo Cambiado");
                        break;
                    }else{
                        filaEncontrada2 = -1;
                    }
                }            
                break;
            case "RETIRO":
                break;
            case "CONSIGNACION":
                break;
            default:
                break;
        }
    } 
    
    
    
    
    ////////////////////////////////////////////////////
    //                                                // 
    //                                                //  
    //             Listener Botones cuenta            //
    //                                                //
    //                                                //
    ////////////////////////////////////////////////////
    
    private void botonInsertarCuentaListener(java.awt.event.ActionEvent evt) {    
        Date myDate = new Date();
        this.operacionCuenta=1;
        this.campoNumCuenta.setText("");
        this.campoIdenCliente.setText("");
        this.campoEstado.setText("ACTIVA");
        this.campoSaldo.setText("0");
        this.campoFecha.setText(new SimpleDateFormat("yyyy-MM-dd").format(myDate)); 
        this.campoNumCuenta.setEnabled(true);
        this.campoIdenCliente.setEnabled(true);
        this.campoSaldo.setEnabled(false);
        this.botonConfirmarCuenta.setEnabled(true);
    } 
    
    
    private void tablaCuentaMouseClicked(java.awt.event.MouseEvent evt) {                                         
        fila = tablaCuenta.rowAtPoint(evt.getPoint());
        int columna = tablaCuenta.columnAtPoint(evt.getPoint());
        if ((fila > -1) && (columna > -1)){
            this.campoNumCuenta.setText(String.valueOf(tablaCuenta.getValueAt(fila,0)));
            for (cuentaAhorro cuenta : cuentas) {
                if (String.valueOf(cuenta.getK_NUM_CUENTA()).equals(String.valueOf(tablaCuenta.getValueAt(fila, 0)))) {
                    this.campoEstado.setText(cuenta.getI_ESTADO());
                    this.campoSaldo.setText(String.valueOf(cuenta.getV_SALDO()));
                    this.campoFecha.setText(cuenta.getF_APERTURA());
                    this.campoIdenCliente.setText(String.valueOf(cuenta.getK_IDENTIFICACION()));
                }
            }
        } 
    } 
    
    private void botonConsultarCuentaListener(java.awt.event.ActionEvent evt) {   
        this.operacionCuenta=2;
        String[] opciones = {"Número de cuenta", "Documento asociado"};
        seleccion = JOptionPane.showOptionDialog(null, "Seleccione el criterio de consulta","consulta",
                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opciones, opciones[0]);
        if(seleccion==0){
            this.campoNumCuenta.setEnabled(true);
            this.botonConfirmarCuenta.setEnabled(true);
        }
        else{
            this.campoIdenCliente.setEnabled(true);
            this.botonConfirmarCuenta.setEnabled(true);
        }
        
    }   
    
    private void botonConfirmarCuenta(java.awt.event.ActionEvent evt) throws SQLException {                                         
       int registroExiste=0;
        int entradaPermitida=0;
        switch (this.operacionCuenta) {
            case 1:
            {
                for (int i = 0; i < tablaCliente.getRowCount(); i++) {
                    if(tablaCliente.getValueAt(0, i).toString().equals(this.campoIdenCliente.getText())){
                        registroExiste = 1;
                        break;
                    }else{
                        registroExiste = 0;
                    }
                }
                if(Long.valueOf(this.campoNumCuenta.getText())<0 || Long.valueOf(this.campoIdenCliente.getText())<0 || registroExiste==0)
                {
                    JOptionPane.showMessageDialog(null, "Entrada no valida.");
                }
                else{
                    cuentaAhorro c = new cuentaAhorro();
                    c.setK_NUM_CUENTA(Long.valueOf(this.campoNumCuenta.getText()));
                    c.setI_ESTADO(this.campoEstado.getText());
                    c.setV_SALDO(Float.valueOf(this.campoSaldo.getText()));
                    c.setF_APERTURA(this.campoFecha.getText());
                    c.setK_IDENTIFICACION(Long.valueOf(this.campoIdenCliente.getText()));
                    dbc2.insertar(c);
                    Object[] newRow={c.getK_NUM_CUENTA(),c.getI_ESTADO(),c.getV_SALDO(),c.getF_APERTURA(),c.getK_IDENTIFICACION()};
                    DefaultTableModel model = (DefaultTableModel) tablaCuenta.getModel();
                    model.addRow(newRow);
                    JOptionPane.showMessageDialog(null, "Cuenta agregada");
                    entradaPermitida=1;
                }

                break;
            }
            case 2:
                DefaultTableModel dm = (DefaultTableModel) tablaCuenta.getModel();
                TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(dm);
                tablaCuenta.setRowSorter(tr);
                if(seleccion==0){
                    tr.setRowFilter(RowFilter.regexFilter(this.campoNumCuenta.getText()));
                }
                else{
                    tr.setRowFilter(RowFilter.regexFilter(this.campoIdenCliente.getText()));
                }
                
                break;
            default:
                break;
        }
        
        if(entradaPermitida==1)
        {
            this.campoDNI.setEnabled(false);
            this.campoTipoID.setEnabled(false);
            this.campoNombre.setEnabled(false);
            this.campoApellido.setEnabled(false);
            this.campoDireccion.setEnabled(false);
            this.campoTelefono.setEnabled(false);
            this.campoSexo.setEnabled(false);
            this.campoFechaNacimiento.setEnabled(false);
            this.campoOcupacion.setEnabled(false);
            this.campoCorreoElectronico.setEnabled(false);
            this.campoIngresoMensual.setEnabled(false);
            this.botonConfirmar.setEnabled(false);
        }
    } 
    
    
    
    ////////////////////////////////////////////////////
    //                                                // 
    //                                                //  
    //             Listener Botones eventos           //
    //                                                //
    //                                                //
    ////////////////////////////////////////////////////    
    
    
    private void tablaEventosMouseClicked(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
    }     
    
    ////////////////////////////////////////////////////
    //                                                // 
    //                                                //  
    //             Listener Botones cliente           //
    //                                                //
    //                                                //
    ////////////////////////////////////////////////////
    
    private void botonActualizarClienteActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        operacionCliente=3;
        this.campoDNI.setEnabled(false);
        this.campoTipoID.setEnabled(true);
        this.campoNombre.setEnabled(true);
        this.campoApellido.setEnabled(true);
        this.campoDireccion.setEnabled(true);
        this.campoTelefono.setEnabled(true);
        this.campoSexo.setEnabled(true);
        this.campoFechaNacimiento.setEnabled(true);
        this.campoOcupacion.setEnabled(true);
        this.campoCorreoElectronico.setEnabled(true);
        this.campoIngresoMensual.setEnabled(true);
        this.botonConfirmar.setEnabled(true);
    }                                                      

    private void botonEliminarClienteActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        operacionCliente = 4;
        this.botonConfirmar.setEnabled(true);
    }   

    private void tablaClienteMouseClicked(java.awt.event.MouseEvent evt) {                                          
        fila = tablaCliente.rowAtPoint(evt.getPoint());
        int columna = tablaCliente.columnAtPoint(evt.getPoint());
        if ((fila > -1) && (columna > -1)){
            this.campoDNI.setText(String.valueOf(tablaCliente.getValueAt(fila,0)));
            for (cliente cliente : clientes) {
                if (String.valueOf(cliente.getK_IDENTIFICACION()).equals(String.valueOf(tablaCliente.getValueAt(fila, 0)))) {
                    this.campoTipoID.setText(cliente.getI_TIPO_IDENTIFICACION());
                    this.campoNombre.setText(cliente.getN_NOMBRE());
                    this.campoApellido.setText(cliente.getN_APELLIDO());
                    this.campoDireccion.setText(cliente.getO_DIRECCION());
                    this.campoTelefono.setText(String.valueOf(cliente.getO_TELEFONO()));
                    this.campoSexo.setText(String.valueOf(cliente.getI_SEXO()));
                    this.campoFechaNacimiento.setText(cliente.getF_NACIMIENTO());
                    this.campoOcupacion.setText(cliente.getO_OCUPACION());
                    this.campoCorreoElectronico.setText(cliente.getO_CORREO_ELECTRONICO());
                    this.campoIngresoMensual.setText(String.valueOf(cliente.getV_INGRESO_MENSUAL()));
                }
            }
        } 
    }   
    
    private void botonInsertarClienteActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        operacionCliente=1;
        this.campoDNI.setText("");
        this.campoTipoID.setText("");
        this.campoNombre.setText("");
        this.campoApellido.setText("");
        this.campoDireccion.setText("");
        this.campoTelefono.setText("");
        this.campoSexo.setText("");
        this.campoFechaNacimiento.setText("");
        this.campoOcupacion.setText("");
        this.campoCorreoElectronico.setText("");
        this.campoIngresoMensual.setText("");
        this.campoDNI.setEnabled(true);
        this.campoTipoID.setEnabled(true);
        this.campoNombre.setEnabled(true);
        this.campoApellido.setEnabled(true);
        this.campoDireccion.setEnabled(true);
        this.campoTelefono.setEnabled(true);
        this.campoSexo.setEnabled(true);
        this.campoFechaNacimiento.setEnabled(true);
        this.campoOcupacion.setEnabled(true);
        this.campoCorreoElectronico.setEnabled(true);
        this.campoIngresoMensual.setEnabled(true);
        this.botonConfirmar.setEnabled(true);
    }  
    
    private void botonConsultarClienteActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        operacionCliente=2;
        this.campoDNI.setEnabled(true);
        this.botonConfirmar.setEnabled(true);
        
    }
                                                     
    private void botonConfirmarActionPerformed(java.awt.event.ActionEvent evt) throws SQLException{     
        int entradaPermitida=0;
        switch (this.operacionCliente) {
            case 1:
                {
                    if((!"M".equals(this.campoSexo.getText())&&!"F".equals(this.campoSexo.getText()))||(Float.valueOf(this.campoIngresoMensual.getText())<0)||(!"TI".equals(this.campoTipoID.getText())&&!"CC".equals(this.campoTipoID.getText()))&&!"CE".equals(this.campoTipoID.getText()))
                    {
                        JOptionPane.showMessageDialog(null, "Entrada no valida. "
                                + "en campo sexo solo se permite M o F, los ingresos mensuales deben ser positivos y el tipo de documento debe ser TI,CC O CE");
                    }
                    else{
                        cliente c = new cliente();
                        c.setK_IDENTIFICACION(Long.valueOf(this.campoDNI.getText()));
                        c.setI_TIPO_IDENTIFICACION(this.campoTipoID.getText());
                        c.setN_NOMBRE(this.campoNombre.getText());
                        c.setN_APELLIDO(this.campoApellido.getText());
                        c.setO_DIRECCION(this.campoDireccion.getText());
                        c.setO_TELEFONO(Long.valueOf(this.campoTelefono.getText()));
                        c.setI_SEXO(this.campoSexo.getText().charAt(0));
                        c.setF_NACIMIENTO(this.campoFechaNacimiento.getText());
                        c.setO_OCUPACION(this.campoOcupacion.getText());
                        c.setO_CORREO_ELECTRONICO(this.campoCorreoElectronico.getText());
                        c.setV_INGRESO_MENSUAL(Float.valueOf(this.campoIngresoMensual.getText()));
                        dbc.insertar(c);
                        Object[] newRow={c.getK_IDENTIFICACION(),c.getI_TIPO_IDENTIFICACION(),c.getN_NOMBRE(),c.getN_APELLIDO(),c.getO_DIRECCION(),c.getO_TELEFONO(),c.getI_SEXO(),c.getF_NACIMIENTO(),c.getO_OCUPACION(),c.getO_CORREO_ELECTRONICO(),c.getV_INGRESO_MENSUAL()};
                        DefaultTableModel model = (DefaultTableModel) tablaCliente.getModel();
                        model.addRow(newRow);
                        JOptionPane.showMessageDialog(null, "Cliente agregado");
                        entradaPermitida=1;
                    }
                    
                    break;
                }
            case 4:
                {
                    cliente c = new cliente();
                    c.setK_IDENTIFICACION(Long.valueOf(this.campoDNI.getText(),10));
                    dbc.eliminar(c);
                    ((DefaultTableModel)tablaCliente.getModel()).removeRow(fila);
                    JOptionPane.showMessageDialog(null, "Contacto borrado");
                    break;
                }
            case 3:
                if((!"M".equals(this.campoSexo.getText())&&!"F".equals(this.campoSexo.getText()))||(Float.valueOf(this.campoIngresoMensual.getText())<0)||(!"TI".equals(this.campoTipoID.getText())&&!"CC".equals(this.campoTipoID.getText()))&&!"CE".equals(this.campoTipoID.getText()))
                {
                    JOptionPane.showMessageDialog(null, "Entrada no valida. "
                            + "en campo sexo solo se permite M o F, los ingresos mensuales deben ser positivos y el tipo de documento debe ser TI,CC O CE");
                }
                else{
                    cliente c = new cliente();
                    c.setK_IDENTIFICACION(Long.valueOf(this.campoDNI.getText()));
                    c.setI_TIPO_IDENTIFICACION(this.campoTipoID.getText());
                    c.setN_NOMBRE(this.campoNombre.getText());
                    c.setN_APELLIDO(this.campoApellido.getText());
                    c.setO_DIRECCION(this.campoDireccion.getText());
                    c.setO_TELEFONO(Long.valueOf(this.campoTelefono.getText()));
                    c.setI_SEXO(this.campoSexo.getText().charAt(0));
                    c.setF_NACIMIENTO(this.campoFechaNacimiento.getText());
                    c.setO_OCUPACION(this.campoOcupacion.getText());
                    c.setO_CORREO_ELECTRONICO(this.campoCorreoElectronico.getText());
                    c.setV_INGRESO_MENSUAL(Float.valueOf(this.campoIngresoMensual.getText()));
                    dbc.actualizar(c);
                    DefaultTableModel model = (DefaultTableModel) tablaCliente.getModel();
                    model.setValueAt(c.getK_IDENTIFICACION(), fila, 0);
                    model.setValueAt(c.getI_TIPO_IDENTIFICACION(), fila, 1);
                    model.setValueAt(c.getN_NOMBRE(), fila, 2);
                    model.setValueAt(c.getN_APELLIDO(), fila, 3);
                    model.setValueAt(c.getO_DIRECCION(), fila, 4);
                    model.setValueAt(c.getO_TELEFONO(), fila, 5);
                    model.setValueAt(c.getI_SEXO(), fila, 6);
                    model.setValueAt(c.getF_NACIMIENTO(), fila, 7);
                    model.setValueAt(c.getO_OCUPACION(), fila, 8);
                    model.setValueAt(c.getO_CORREO_ELECTRONICO(), fila, 9);
                    model.setValueAt(c.getV_INGRESO_MENSUAL(), fila, 10);
                    JOptionPane.showMessageDialog(null, "Cliente Actualizado");
                }
                
                break;
            case 2:
                DefaultTableModel dm = (DefaultTableModel) tablaCliente.getModel();
                TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(dm);
                tablaCliente.setRowSorter(tr);
                tr.setRowFilter(RowFilter.regexFilter(this.campoDNI.getText()));
                
                break;
            default:
                break;
        }
        
        if(entradaPermitida==1)
        {
            this.campoDNI.setEnabled(false);
            this.campoTipoID.setEnabled(false);
            this.campoNombre.setEnabled(false);
            this.campoApellido.setEnabled(false);
            this.campoDireccion.setEnabled(false);
            this.campoTelefono.setEnabled(false);
            this.campoSexo.setEnabled(false);
            this.campoFechaNacimiento.setEnabled(false);
            this.campoOcupacion.setEnabled(false);
            this.campoCorreoElectronico.setEnabled(false);
            this.campoIngresoMensual.setEnabled(false);
            this.botonConfirmar.setEnabled(false);
        }
        
    }                                              
    
    public void llenaCuentas() throws SQLException{
        cuentas = dbc2.getCuenta();
        dataCuenta = new Object[cuentas.length][5];                    
        
        for (int c1=0;c1<cuentas.length;c1++){
            this.dataCuenta[c1][0]=cuentas[c1].getK_NUM_CUENTA();
            this.dataCuenta[c1][1]=cuentas[c1].getI_ESTADO();
            this.dataCuenta[c1][2]=cuentas[c1].getV_SALDO();
            this.dataCuenta[c1][3]=cuentas[c1].getF_APERTURA();
            this.dataCuenta[c1][4]=cuentas[c1].getK_IDENTIFICACION();
        }
    }
    
    public void llenaClientes() throws SQLException{
        
        clientes = dbc.get();
        dataCliente = new Object[clientes.length][11];                    

        for (int c=0;c<clientes.length;c++){
            dataCliente[c][0]=clientes[c].getK_IDENTIFICACION();
            dataCliente[c][1]=clientes[c].getI_TIPO_IDENTIFICACION();
            dataCliente[c][2]=clientes[c].getN_NOMBRE();
            dataCliente[c][3]=clientes[c].getN_APELLIDO();
            dataCliente[c][4]=clientes[c].getO_DIRECCION();
            dataCliente[c][5]=clientes[c].getO_TELEFONO();
            dataCliente[c][6]=clientes[c].getI_SEXO();
            dataCliente[c][7]=clientes[c].getF_NACIMIENTO();
            dataCliente[c][8]=clientes[c].getO_OCUPACION();
            dataCliente[c][9]=clientes[c].getO_CORREO_ELECTRONICO();
            dataCliente[c][10]=clientes[c].getV_INGRESO_MENSUAL();
        }
    }
    
    public void llenaMovimientos() throws SQLException{
        
        movimientos = dbc3.getMovimiento();
        dataMovimiento = new Object[movimientos.length][5];                    

        for (int c=0;c<movimientos.length;c++){
            dataMovimiento[c][0]=movimientos[c].getK_MOVIMIENTO();
            dataMovimiento[c][1]=movimientos[c].getV_MOVIMIENTO();
            dataMovimiento[c][2]=movimientos[c].getI_TIPO();
            dataMovimiento[c][3]=movimientos[c].getF_MOVIMIENTO();
            dataMovimiento[c][4]=movimientos[c].getK_NUM_CUENTA();
        }
    }
    
    public void llenaEventos() throws SQLException{
        
        eventos = dbc4.getEvento();
        dataEvento = new Object[eventos.length][5];                    

        for (int c=0;c<eventos.length;c++){
            dataEvento[c][0]=eventos[c].getK_EVENTO();
            dataEvento[c][1]=eventos[c].getI_TIPO_EVENTO();
            dataEvento[c][2]=eventos[c].getF_EVENTO();
            dataEvento[c][3]=eventos[c].getO_DESCRIPCION();
            dataEvento[c][4]=eventos[c].getK_NUM_CUENTA();
        }
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton botonActivarCuenta;
    private javax.swing.JButton botonActualizarCliente;
    private javax.swing.JButton botonBloquearCuenta;
    private javax.swing.JButton botonConfirmar;
    private javax.swing.JButton botonConsultarCliente;
    private javax.swing.JButton botonConsultarEvento;
    private javax.swing.JButton botonConsultarMovimientos;
    private javax.swing.JButton botonConsultarTodosMovimientos;
    private javax.swing.JButton botonDesactivarCuenta;
    private javax.swing.JButton botonEliminarCliente;
    private javax.swing.JButton botonFinalizarTransaccion;
    private javax.swing.JButton botonInsertarCliente;
    private javax.swing.JButton botonConfirmarCuenta;
    private javax.swing.JTextField campoApellido;
    private javax.swing.JTextField campoCantidad;
    private javax.swing.JTextField campoCodigoEvento;
    private javax.swing.JTextField campoCorreoElectronico;
    private javax.swing.JTextField campoCuentaDestino;
    private javax.swing.JTextField campoCuentaOrigen;
    private javax.swing.JTextField campoDNI;
    private javax.swing.JTextField campoDescripcionEvento;
    private javax.swing.JTextField campoDireccion;
    private javax.swing.JTextField campoEstado;
    private javax.swing.JTextField campoFecha;
    private javax.swing.JTextField campoFechaEvento;
    private javax.swing.JTextField campoFechaNacimiento;
    private javax.swing.JTextField campoIdenCliente;
    private javax.swing.JTextField campoIngresoMensual;
    private javax.swing.JTextField campoNombre;
    private javax.swing.JTextField campoNumCuenta;
    private javax.swing.JTextField campoNumCuentaEvento;
    private javax.swing.JTextField campoOcupacion;
    private javax.swing.JTextField campoSaldo;
    private javax.swing.JTextField campoSexo;
    private javax.swing.JTextField campoTelefono;
    private javax.swing.JTextField campoTipoEvento;
    private javax.swing.JTextField campoTipoID;
    private javax.swing.JComboBox<String> elegirTransaccion;
    private javax.swing.JButton botonConsultarCuenta;
    private javax.swing.JButton botonInsertarCuenta;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelApellido;
    private javax.swing.JLabel labelCantidad;
    private javax.swing.JLabel labelCodigoEvento;
    private javax.swing.JLabel labelCorreoElectronico;
    private javax.swing.JLabel labelCuentaDestino;
    private javax.swing.JLabel labelCuentaOrigen;
    private javax.swing.JLabel labelDNI;
    private javax.swing.JLabel labelDescripcionEvento;
    private javax.swing.JLabel labelDireccion;
    private javax.swing.JLabel labelEstado;
    private javax.swing.JLabel labelFecha;
    private javax.swing.JLabel labelFechaEvento;
    private javax.swing.JLabel labelFechaNacimiento;
    private javax.swing.JLabel labelIdenCliente;
    private javax.swing.JLabel labelIngresoMensual;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelNumCuenta;
    private javax.swing.JLabel labelNumCuentaEvento;
    private javax.swing.JLabel labelOcupacion;
    private javax.swing.JLabel labelSaldo;
    private javax.swing.JLabel labelSexo;
    private javax.swing.JLabel labelTelefono;
    private javax.swing.JLabel labelTipoEvento;
    private javax.swing.JLabel labelTipoID;
    private javax.swing.JPanel panelClientes;
    private javax.swing.JPanel panelCuenta;
    private javax.swing.JPanel panelEventos;
    private javax.swing.JPanel panelTransacciones;
    private javax.swing.JTable tablaCliente;
    private javax.swing.JTable tablaCuenta;
    private javax.swing.JTable tablaEventos;
    private javax.swing.JTable tablaMovimientos;
    // End of variables declaration                   
}
